#模組包(package)與工作區(workspace)的架構:
###
workspace_1_folder/        -- WORKSPACE
  src/                   -- SOURCE SPACE
    CMakeLists.txt       -- 'Toplevel' CMake file, provided by catkin
    package_1/
      CMakeLists.txt     -- CMakeLists.txt file for package_1
      package.xml        -- Package manifest for package_1
    ...
    package_n/
      CMakeLists.txt     -- CMakeLists.txt file for package_n
      package.xml        -- Package manifest for package_n
...
workspace_n_folder/        -- WORKSPACE
  src/                   -- SOURCE SPACE
    CMakeLists.txt       -- 'Toplevel' CMake file, provided by catkin
    package_1/
      CMakeLists.txt     -- CMakeLists.txt file for package_1
      package.xml        -- Package manifest for package_1
    ...
    package_n/
      CMakeLists.txt     -- CMakeLists.txt file for package_n
      package.xml        -- Package manifest for package_n
###

#模組包的建立流程:
###
$ cd ~/[path of workspace]	#註:[path of workspace]為你所創立的工作區路徑
$ mkdir src	#可能會出現:這個檔案已經存在了，代表你建過了!
$ cd src
$ catkin_create_pkg [name of package] [depend1] [depend2] [depend3]	#註:[depend1] [depend2] [depend3]為你需要引入(include)的函式庫(library)，例:std_msgs
$ cd ~/catkin_ws	#切換到工作區(workspace)對下一個步驟來說相當重要!
$ catkin_make	#建立模組包(package)到你的工作區(workspace)
$ . ~/catkin_ws/devel/setup.bash	#To add the workspace to your ROS environment you need to source the generated setup file
#將你的cpp檔放在beginner_tutorials/src中或py檔放在beginner_tutorials/scripts中(還有其它放法，參: http://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv )，***完整路徑為 ~/workspace/catkin_ws/src/beginner_tutorials/src
#之後修改好CMakeLists.txt與package.xml	#其修改方式參文檔 $ gedit workspace/opencv_ws/src/opencvtest/CMakeLists.txt
$ cd ~/catkin_ws	#切換到工作區(workspace)對下一個步驟來說相當重要!
$ catkin_make	#建立並編譯你的code模組包(package)到你的工作區(workspace)
$ . ~/[path of workspace]/devel/setup.bash 或 $ source ~/catkin_ws/devel/setup.bash	#這行很重要***，註:source與.的指令有相同的效果
#接著你在任何目錄都找的到你建立的package了!不需要在工作區!
$ rosrun [name of package] [name of code]	#ROS執行你的code
###

#launch檔的使用及修改:
###
$ source /opt/ros/kinetic/setup.bash	#***每次使用launch檔前都要記得用這個!
$ source ~/[path of workspace]/setup.bash	#***所有有用到的node之workspace都要source其setup.bash檔，不然它會找不到node
$ roslaunch turtlebot_gazebo bumper.launch world_file:=/usr/share/gazebo-7/worlds/willowgarage.world	#其中turtlebot_gazebo=[name of package]，bumper.launch=[name of launch]，/usr/share/gazebo-7/worlds/willowgarage.world=[the name of thw world file that you want to open with its own path]
#修改部份參同目錄下bumper.launch中描述
###

#roscd使用方法:
###
$ cd ~/[path of workspace]	#註:[path of workspace]為你所創立的工作區路徑
$ source devel/setup.bash
$ roscd [name of package]	#註:[name of package]為你所要找的模組包名稱
###

$ roslaunch turtlebot_gazebo amcl_demo.launch map_file:=/home/kumakai/maps/test1.yaml
$ sudo gedit dwa_local_planner_params.yaml	#修改turtlebot_navigation參數***
$ . workspace/[name of your workspace]/devel/setup.bash	#bash檔設定
$ . /opt/ros/kinetic/setup.bash	#bash檔設定

